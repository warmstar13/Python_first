Ctrl + Alt + T - открытие терминала

Что такое APT?

name.title() - Выделяет слова и делает их с большой буквы
upper() - ALEX
lower() - alex


parentheses - круглые скобки

name = "alex"
greeting = f"Hello, {name}"
name = "tank"
print(greeting) // Hello, alex

Не забываем f перед строкой

\t - tab
\n - new line  

lstrip() - deletes spaces from left // rstrip(), strip()

removeprefix() - deletes prefix once, if exists
removesuffix()

stubborn - упрямый
assign - присваивать

////////////////////////////////////////////////////////////////////////////////

10 ** 6 (10 в степени 6)

x = 14_000_000_000 // valid variable

x, y, z = 0, 0, 0

No constants (If you want, write the variable with uppercase letters (VALUE, NUMMAX, ...))

//////////////////////////////////////////////////////////////////////////

# bla bla bla // comment

sparcely - редко
explicit - явный, точный
intricacies - путаница

////////////////////////////////////////////////////////////////////////////

list = ['1', '1', '1']

list[-1]     # the last element

list.append(x)    # to add in the end

list.insert(pos, x)   # to add in the given position
list.insert(1, "0")   # [1, 0, 1, 1]

del list[pos]   # deletes

val = list.pop()   # deletes the last elem and assign the value to val
list.pop(ind)   # the same but not from end
list.remove('1')  # removes the first '1' in list
remove only works if the value exists, otherwise error

list.sort()
sorted(list)  # doesn't change the list
list.sort(reverse=true)
list.reverse()
len(list)

adjust = устанавливать
retrieve = извлекать
indent = отступ

/////////////////////////////////////////

for x in y:
    bla()


numbers = list(range(1, 6)) [1, 2, 3, 4, 5]

inclusive - включительно

min(list), max(list), sum(list) # commands to work with number list

squares = [value ** 2 for value in range(1, 5)]   # [1, 4, 9, 16]

list = [1, 2, 3, 4, 5]
list[1:3]    #  [2, 3]
list[1:]     #  [2, 3, 4, 5]

для присваивания пишем 
list2 = list1[:]  #  иначе будет как 2 указателя на 1 обьект

tuple = constant list
changing possible only by complete reassigning of the tuple

tuple with 1 element should be defined like
tup = (x,)

ctrl + /    # comments the whole block

ctrl + K, Ctrl + O    # opens the files

r/learnpython   # to read for beginners

ctrl + shift + tab   # переключаться между окнами в VS Code
Alt + '1', '2', '3' # тоже переключаться но быстрее

В чем заключается разница между git pull и git fetch?

Команда git fetch загружает удаленное содержимое, но не изменяет состояние локального репозитория, 
в то время как git pull загружает удаленное содержимое и сразу пытается 
изменить состояние локального репозитория, чтобы оно соответствовало этому содержимому.

git init  # makes a new git point of working

deployment - размещение

https://explainshell.com/    # helps to understand the git commands

2 conditions:
if x > 10 and(or) x < 15:
    ...

checking whether variable is in the list:
list = ['ana', 'conda']
'ana' in list

if, elif, else 

if list:    # true, if the list is not empty
    ...

///////////////////////////////////////////////////////////

example of dictionary:
alien_0 = {'color': 'green', "points": 5} 

to nest - вить гнездо?

adding works like maps in c++

dict.get(key, variable if val doesn't exist)

for k, v in dict.items():  # goes through all keys + vals
    ...

keys()    # goes through all keys
values()  # obvious

list in dictionaries (example):
pizza = {
 'crust': 'thick',
 'toppings': ['mushrooms', 'extra cheese'],
 }

set(list)   # gives only unique values

example of set:
set = {'1', '2', '2', '1'}   # gives '1', '2'

nesting - lists in lists

range(x)  # 0, 1, 2, ..., x-1


dictionary in dictionary:
users = {
 'aeinstein': {
 'first': 'albert',
 'last': 'einstein',
 'location': 'princeton',
 },
 'mcurie': {
 'first': 'marie',
 'last': 'curie',
 'location': 'paris',
 },
 }

///////////////////////////////////////////////////////////


int(str)  # переводит строку и инт

break    # stops the loop
continue  # obvious

///////////////////////////////////////////////////////////

Multiline comments look like this:
"""
fsdsdf
dvs
"""

Example of function:

def greet_user():     # named body
 """Display a simple greeting."""  #  named docstring
 print("Hello!")
greet_user()

in the parentheses there is parameter
the value is named argument

alt + shift + Up(Down)    # moves the selected block up(down)


Example of keyboard argument:

def describe_pet(animal_type, pet_name):
    """Display information about a pet."""
    print(f"\nI have a {animal_type}.")
    print(f"My {animal_type}'s name is {pet_name.title()}.")
describe_pet(animal_type='hamster', pet_name='harry')

can't mix keyboard argument with positional argument

can put default values:
def describe_pet(pet_name, animal_type='dog'):

default values must be placed from right to left

return works normally

every change with the list in the function are permanent, unlike the number
Неизменяемые объекты (Immutable): Такие как int, float, str, tuple и т.д. При попытке изменить значение этих объектов создается новый объект.
Изменяемые объекты (Mutable): Такие как list, dict, set и т.д. Эти объекты можно изменять напрямую, не создавая новый объект.

to prevent from modifying we should write:
function_name(list_name[:])

example of arbitrary number of arguments
def make_pizza(*toppings):
 """Print the list of toppings that have been requested."""
 print(toppings)

 mixing positional and arbitrary arguments:
 def make_pizza(size, *toppings):


example of arbitrary keyboard numbers:
def build_profile(first, last, **user_info):
    """Build a dictionary containing everything we know about a user."""
    user_info['first_name'] = first
    user_info['last_name'] = last
    return user_info
user_profile = build_profile('albert', 'einstein',
                            location='princeton',
                            field='physics')
print(user_profile)

**kwarg - dictionary    # keyword argument

to connent other files(modules), use 
import file_name    # without py
file_name.func(args)     # how to start a function

if you don't need the whole file but the specific functions, use:
from module import func1, func2, func3

alias - "клички, сокращения"
example of alias in import:
from module import func_1 as f_1

alias can also be used for the name of modules

if we write:
from file_name import *   # you won't need to write the name of the file in functions (should not use in big projects)

////////////////////////////////////////////////////////////////////////////////////////

Удобные комбинации клавиш chrome
https://support.google.com/chrome/answer/157179?hl=ru-ru&co=GENIE.Platform%3DDesktop#zippy=%2C%D1%81%D0%BE%D1%87%D0%B5%D1%82%D0%B0%D0%BD%D0%B8%D1%8F-%D0%BA%D0%BB%D0%B0%D0%B2%D0%B8%D1%88-%D0%B4%D0%BB%D1%8F-%D0%B2%D0%BA%D0%BB%D0%B0%D0%B4%D0%BE%D0%BA-%D0%B8-%D0%BE%D0%BA%D0%BE%D0%BD%2C%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8-google-chrome%2C%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%B8%D1%8F-%D0%B2-%D0%B0%D0%B4%D1%80%D0%B5%D1%81%D0%BD%D0%BE%D0%B9-%D1%81%D1%82%D1%80%D0%BE%D0%BA%D0%B5

instantiation - создание экземпляра
object - class result
creating object = instantiation
instance - example of an class
object is not just a class, it could be a string, a decimal, float, ...

classes should be named with capital letters
attributes = variables in classes

we can access the class attributes by:
variable.attribute

inheritance - наследование

super()     # lets use function from parent class
example:
class ElectricCar(Car):

    def __init__(self, make, model, year):

    """Initialize attributes of the parent class."""
        super().__init__(make, model, year)

superclass = parent class
subclass = child class

overriding is simple

uncluttered = "незагроможденный"
 
classes are imported just like functions

If you are using the parent class's methods through an instance of the child class, 
you do not need to import the parent class separately. 
The inheritance chain in Python ensures that the child class has access to the parent class's methods.

https://pymotw.com/3/     # contains the information about the most part of standart libraries

///////////////////////////////////////////////////////////////////////////

robust - крепкий

how to read from the text file:

from pathlib import Path

path = Path('pi_digits.txt')
contents = path.read_text()